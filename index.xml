<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julian Rubin</title>
    <link>https://hejcz.github.io/</link>
    <description>Recent content on Julian Rubin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Aug 2021 07:02:00 +0200</lastBuildDate><atom:link href="https://hejcz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIL: org.reflections vs ClassGraph</title>
      <link>https://hejcz.github.io/posts/org_reflections_vs_classgraph/</link>
      <pubDate>Fri, 27 Aug 2021 07:02:00 +0200</pubDate>
      
      <guid>https://hejcz.github.io/posts/org_reflections_vs_classgraph/</guid>
      <description>Many applications perform some kind of a classpath scan. Think of spring finding all classes annotated with @RestController or implementing specific interface.
In work we use patched org.reflections in version 9.11. Upgrade to 9.12 failed due to a bug so we considered changing reflection library. The only reasonable candidate was ClassGraph.
Both libraries work in similar maneer:
 Determine jars and directories on classpath. Iterate over their content. If specific class or resource matches user-defined rules add them to result set.</description>
    </item>
    
    <item>
      <title>TIL: Debugging maven surefire test in IDE</title>
      <link>https://hejcz.github.io/posts/debug_maven_surefire/</link>
      <pubDate>Thu, 26 Aug 2021 21:19:00 +0200</pubDate>
      
      <guid>https://hejcz.github.io/posts/debug_maven_surefire/</guid>
      <description>Following command makes surefire wait with test execution until you connect on port 8000.
mvn -Dtest=SomeTest \ -Dmaven.surefire.debug=&amp;quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent -Djava.compiler=NONE&amp;quot; \ test -pl :some-module </description>
    </item>
    
    <item>
      <title>TIL: How to kill hanging postgres transaction</title>
      <link>https://hejcz.github.io/posts/killing_hanging_process_on_pg/</link>
      <pubDate>Thu, 29 Jul 2021 13:23:27 +0200</pubDate>
      
      <guid>https://hejcz.github.io/posts/killing_hanging_process_on_pg/</guid>
      <description>postgres.log
LOG: process 786667 still waiting for AccessShareLock \ on relation 16632 of database 16384 after 7064693.878 ms ... DETAIL: Process holding the lock: 787040. pg_Stat_activity contains some info about problematic process like query or ip.
db=# select query from pg_Stat_activity where pid = 787040; For locks details there is:
SELECT blocked_locks.pid AS blocked_pid, blocked_activity.usename AS blocked_user, blocking_locks.pid AS blocking_pid, blocking_activity.usename AS blocking_user, blocked_activity.query AS blocked_statement, blocking_activity.query AS current_statement_in_blocking_process FROM pg_catalog.</description>
    </item>
    
    <item>
      <title>TIL: Debugging frozen JVM</title>
      <link>https://hejcz.github.io/posts/my-first-post/</link>
      <pubDate>Wed, 28 Jul 2021 07:35:48 +0200</pubDate>
      
      <guid>https://hejcz.github.io/posts/my-first-post/</guid>
      <description>When kill -3 &amp;lt;pid&amp;gt; and jconsole &amp;lt;pid&amp;gt; don&amp;rsquo;t work as vm froze it is still possible to get some info about the process.
gdb -p &amp;lt;pid&amp;gt; (gdb) generate-core-file Saved corefile core.&amp;lt;pid&amp;gt; (gdb) quit To extract the stacktrace:
jhsdb jstack \ --exe /home/jrubin/.sdkman/candidates/java/current/bin/java \ --core core.&amp;lt;pid&amp;gt; To extract the heap dump:
jhsdb jmap --binaryheap \ --dumpfile dump.hprof \ --exe /home/jrubin/.sdkman/candidates/java/current/bin/java \ --core core.&amp;lt;pid&amp;gt; Notice that jhsbd jmap took couple of minutes to run.</description>
    </item>
    
  </channel>
</rss>
